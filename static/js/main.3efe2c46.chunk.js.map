{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","array","length","Array","from","map","v","k","x","addPreZero","num","state","year","M_month","month","day","week","hour","Minute","second","Zodiac","split","M_months","weekArr","setInterval","time","Date","setState","getUTCFullYear","getUTCMonth","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","className","this","index","key","style","transform","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3efe2c46.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state=({\n      year:2019,\n      M_month:'Mar',\n      month:1,\n      day:1,\n      week:1,\n      hour:12,\n      Minute:1,\n      second:1,\n      Zodiac:'Aries, Taurus, Gemini, Cancer, Leo, Virgo, Libra, Scorpio, Sagittarius, Capricorn, Aquarius, Pisces'.split(','),\n      M_months:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Spt\",\"Oct\",\"Nov\",\"Dec\"],\n      weekArr:['Mon','Tues','Wed','Thur','Fri','Sat','Sun']\n    })\n  }\n\n componentWillMount(){\n   setInterval(()=>{\n     let time= new Date()\n     this.setState({\n      year:this.state.Zodiac[time.getUTCFullYear()%12],\n      M_month:this.state.M_months[time.getUTCMonth()],\n      month:time.getMonth()+1,\n      day:time.getDate(),\n      week:time.getDay(),\n      hour:time.getHours(),\n      Minute:time.getMinutes(),\n      second:time.getSeconds()\n     })\n   },1000)\n\n }\n  array = length => Array.from({length}).map((v, k) => k).map(x=>x+1);\n  addPreZero = num =>{\n    if(num>=10)return num\n    return '0'+num\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className='msg'>\n            <div  className='year'>\n            <span>\n            {this.state.year}</span> / Year\n            </div>\n          </div>\n          <div className='M_month'>\n          {`${this.state.M_month}`}\n          </div>\n          <div className=\"copyright\">\n            <h6>&copy; ap_darknight</h6>\n          </div>\n          <div className='box'>\n\n           \n\n            {this.array(12).map((x,index)=>{\n              return (\n                <div key={index} className={`month item ${index===(this.state.month-1)?\"active\":\"\"}`} style={{transform: `rotate(${index*30-30*(this.state.month-1)}deg)`}}>\n                  {`${this.state.M_months[x-1]}`}\n                </div>\n              )\n            })}\n\n            {this.array(30).map((x,index)=>{\n              return (\n                <div key={index} className={`day item ${index===(this.state.day-1)?\"active\":\"\"}`} style={{transform: `rotate(${index*12-12*(this.state.day-1)}deg)`}}>\n                  {`${x} day`}\n                </div>\n              )\n            })}\n\n            {this.array(7).map((x,index)=>{\n              return (\n                <div key={index} \n                className={`week item ${index===(this.state.week-1)?\"active\":\"\"}`} \n                style={{transform: `rotate(${index*(360/21)-(360/21)*(this.state.week-1)}deg)`}}>\n                  {`${this.state.weekArr[x-1]}`}\n                </div>\n              )\n            })}\n\n            {this.array(24).map((x,index)=>{\n              return (\n                <div key={index} \n                className={`hour item ${index===(this.state.hour-1)?\"active\":\"\"}`} \n                style={{transform: `rotate(${index*(360/24)-(360/24)*(this.state.hour-1)}deg)`}}>\n                  {`${x} hr`}\n                </div>\n              )\n            })}\n\n            {this.array(60).map((x,index)=>{\n              return (\n                <div key={index} \n                className={`Minute item ${index===(this.state.Minute-1)?\"active\":\"\"}`} \n                style={{transform: `rotate(${index*(360/60)-(360/60)*(this.state.Minute-1)}deg)`}}>\n                  {`${x} min`}\n                </div>\n              )\n            })}\n\n            {this.array(60).map((x,index)=>{\n              return (\n                <div key={index} \n                className={`second item ${index===(this.state.second-1)?\"active\":\"\"}`} \n                style={{transform: `rotate(${index*(360/60)-(360/60)*(this.state.second-1)}deg)`}}>\n                  {`${x} sec`}\n                </div>\n              )\n            })}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}